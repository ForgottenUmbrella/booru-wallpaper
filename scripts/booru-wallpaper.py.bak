#!/usr/bin/env python3
# coding=utf-8
"""Another version. Features added when I feel like it."""
import sys
import os.path
import subprocess
# TODO: Useless import??
# import getpass
import urllib.parse
import urllib.request
import argparse
import configparser
import json
import tkinter
import ctypes
import logging

# TODO: Undo comment import
# import crontab

script_path = os.path.realpath(__file__)
this_directory = os.path.dirname(script_path)
defaults_path = os.path.join(this_directory, "defaults.ini")
config_path = os.path.join(this_directory, "config.json")
data_path = os.path.join(this_directory, "data.json")
cron_path = os.path.join(this_directory, "schedule.tab")
log_path = os.path.join(this_directory, "log.log")

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
debug_handler = logging.FileHandler(log_path, mode="w")
debug_handler.setLevel(logging.DEBUG)
debug_formatter = logging.Formatter(
    "{asctime} - {name}:{levelname}: {message}", style="{")
debug_handler.setFormatter(debug_formatter)
terminal_handler = logging.StreamHandler()
terminal_handler.setLevel(logging.INFO)
terminal_formatter = logging.Formatter("{levelname}: {message}", style="{")
terminal_handler.setFormatter(terminal_formatter)
logger.addHandler(debug_handler)
logger.addHandler(terminal_handler)


def gram_join(string, splitter=" ", joiner=", ", final_joiner=" and "):
    """Split a string and return a rejoined (perhaps more grammatical) one."""
    string_as_list = string.split(splitter)
    list_needs_joining = len(string_as_list) > 1
    if list_needs_joining:
        first_section = joiner.join(string_as_list[:-1])
        gram_string = final_joiner.join([first_section, string_as_list[-1]])
    else:
        gram_string = string
    return gram_string


def get_image(tags, imageboard, attempts=1, size=1.0):
    """Retrieve an image and return its data."""
    posts = f"{imageboard}/posts.json"
    query = urllib.parse.urlencode({
        "limit": 1,
        "tags": " ".join(tags),
        "random": "true",
    })
    SUCCESS = range(100, 400)

    root = tkinter.Tk()
    screen_height = root.winfo_screenheight()
    screen_width = root.winfo_screenwidth()
    logger.debug(f"screen height and width = {screen_height}x{screen_width}")

    for attempt in range(attempts):
        post = f"{posts}?{query}"
        logger.info(f"Attempt {attempt}: Getting image...")
        try:
            with urllib.request.urlopen(post) as request:
                status = request.getcode()
                logger.debug(f"status = {status}")
                request_succeeded = status in SUCCESS
                if request_succeeded:
                    data = json.loads(request.read().decode("utf-8"))[0]
                else:
                    data = {}
        except urllib.error.HTTPError as original_error:
            logger.error(original_error)
            raise ValueError("Probably too many tags") from None
        except urllib.error.URLError as original_error:
            logger.error(original_error)
            raise OSError("Probably no internet connection") from None

        good_fit = (data.get("image_height", 0) >= screen_height * size
                    and data.get("image_width", 0) >= screen_width * size)
        if data and good_fit:
            break

    else:
        if not request_succeeded:
            error = f"{imageboard} returned status {status}"
        elif not good_fit:
            error = "Image wasn't big enough"
        else:
            error = "¯\_(ツ)_/¯"
        raise ValueError(f"Image getting failed. {error}")

    logger.debug(f"data = {data}")
    return data


def download(url, file_path):
    """Download a file from a url."""
    logger.info("Downloading image...")
    urllib.request.urlretrieve(url, file_path)


def set_wallpaper(image_path):
    """Set the desktop wallpaper to the image specified."""
    logger.info("Setting wallpaper...")
    logger.debug(f"image_path = {image_path}")
    logger.debug(f"sys.platform = {sys.platform}")

    windows = "win32"
    linux = "linux"
    mac = "darwin"

    if sys.platform == windows:
        SPI_SETDESKTOPWALLPAPER = 20
        SPIF_SENDCHANGE = 2
        IRRELEVANT_PARAM = 0
        ctypes.windll.user32.SystemParametersInfoW(
            SPI_SETDESKTOPWALLPAPER, IRRELEVANT_PARAM, image_path,
            SPIF_SENDCHANGE)
    elif sys.platform == linux:
        subprocess.call(
            "gsettings set org.gnome.desktop.background picture-uri "
            f"file://{image_path}", shell=True)
    elif sys.platform == mac:
        subprocess.call(
            "tell application 'Finder' to set desktop picture to POSIX "
            f"file {image_path}", shell=True)
    else:
        raise NotImplementedError("OS is not yet supported")


def init_parser(defaults):
    """Return an ArgumentParser with the required arguments."""
    parser = argparse.ArgumentParser(
        "Utility to regularly set the wallpaper to a random tagged image from "
        "a booru")
    subparsers = parser.add_subparsers(dest="subcommand")

    subparser_set = subparsers.add_parser("set", help="set the wallpaper")
    subparser_set.add_argument(
        "tags", nargs="*",
        help="a space-delimited list of tags the image must match")
    subparser_set.add_argument(
        "-i", "--imageboard", default=defaults["imageboard"],
        help="a URL to source images from (default: %(default)s)")
    subparser_set.add_argument(
        "-r", "--retries", type=int, default=int(defaults["retries"]),
        help="the number of times to retry getting the image "
        "(default: %(default)s")
    subparser_set.add_argument(
        "-s", "--size", type=float, default=float(defaults["size"]),
        help="the minimum size of the image relative to the screen "
        "(default: %(default)s)")
    subparser_set.add_argument(
        "-n", "--next", action="store_true",
        default=defaults.getboolean("next"),
        help="get the next wallpaper from the previous settings "
        "(which can be overloaded)")

    subparser_list = subparsers.add_parser(
        "list", help="list information about the current wallpaper")
    subparser_list.add_argument(
        "list", nargs="*", choices=[
            "all",
            "artist",
            "character",
            "copyright",
            "general",
        # XXX: default can't be list (http://bugs.python.org/issue9625)
        # ], default=[element.strip() for element in defaults["list"].split(",")],
        ], default="all",
        help="the list to list (default: %(default)s)")

    parser.add_argument(
        "-d", "--duration", type=int, choices=range(1, 25),
        default=int(defaults["duration"]), metavar="{1 ... 24}",
        help="the duration of the wallpaper in hours (default: %(default)s")

    group_verbosity = parser.add_mutually_exclusive_group()
    group_verbosity.add_argument(
        "-v", "--verbose", action="store_true",
        default=defaults.getboolean("verbose"), help="increase verbosity")
    group_verbosity.add_argument(
        "-q", "--quiet", action="store_true",
        default=defaults.getboolean("quiet"), help="decrease verbosity")

    return parser


def init_defaults(path):
    config_parser = configparser.ConfigParser()
    try:
        with open(path) as config_file:
            config_parser.read_file(config_file)
    except FileNotFoundError:
        logger.error("No defaults.ini file")

    logger.debug("config_parser['DEFAULT']:")
    for key, value in config_parser["DEFAULT"]:
        logger.debug(f"{key} = {repr(value)}")

    if not config_parser["DEFAULT"]:
        config_parser["DEFAULT"] = {
            "imageboard": "https://danbooru.donmai.us",
            "retries": 2,
            "size": 0.0,
            "next": False,
            "list": "all",
            "duration": 24,
            "verbose": False,
            "quiet": False
        }
        with open(path, "w") as defaults_file:
            config_parser.write(defaults_file)

    return config_parser


def main(argv=sys.argv[1:]):
    """Set the wallpaper and schedule it to change."""

    default_args = init_defaults(defaults_path)["DEFAULT"]
    parser = init_parser(default_args)
    args = vars(parser.parse_args(argv))

    if len(sys.argv) == 1:
        parser.parse_args(["--help"])
        # Explicit implicit return

    if args["verbose"]:
        terminal_handler.setLevel(logging.DEBUG)
    elif args["quiet"]:
        terminal_handler.setLevel(logging.CRITICAL)

    # Nothing is logged to the screen until level is set
    logger.debug(f"args = {args}")

    if args["subcommand"] == "set":
        if args["next"]:
            logger.debug("--next called")
            try:
                with open(config_path) as config_file:
                    previous_args = json.load(config_file)
            except (FileNotFoundError, json.JSONDecodeError):
                logger.error("No config file")
                raise ValueError(
                    "No previously set tags. Please set some before "
                    "requesting the next wallpaper") from None
            for arg in previous_args:
                arg_value = previous_args[arg]
                logger_debug(f'(previous_args) {arg} == {arg_value}')
                if arg not in args:
                    logger.debug(f'(previous_args) {arg} not in current args')
                    args[arg] = previous_args[arg]
            logger.debug(f'(next) args = {args}')

        imageboard = args['imageboard']
        max_attempts = args['retries'] + 1
        data = get_image(
            args['tags'], imageboard, attempts=max_attempts,
            size=args['size'])
        # data['file_url'] begins with a forward-slash
        partial_url = data['file_url']
        url = f'{imageboard}{partial_url}'
        file_extension = data['file_ext']
        filename = f'wallpaper.{file_extension}'
        path = os.path.join(this_directory, filename)

        download(url, path)
        set_wallpaper(path)

        with open(data_path, 'w') as data_file:
            json.dump(data, data_file, indent=4, separators=(', ', ': '))

        config_parser['SETTINGS'] = args
        with open(config_path, 'w') as config_file:
            config_parser.write(config_file)

    if args['subcommand'] == 'list':
        if 'all' in args['list']:
            args['list'] = [
                'artist',
                'character',
                'copyright',
                'general',
            ]

        try:
            with open(data_path) as data_file:
                data = json.load(data_file)
                logger.debug(f'(list) data = {data}')
        except FileNotFoundError:
            raise ValueError(
                'There is no wallpaper to list data about. '
                'Please set some tags') from None

        for listed_data in args['list']:
            list_name = listed_data.capitalize()
            gram_list = gram_join(data[f'tag_string_{listed_data}'])
            # Functionality, therefore printed instead of logged
            print(f'{list_name}: {gram_list}')

    # TODO: remove `or True`/`and False`
    if args['duration'] != previous_args['duration'] and False:
        logger.info('Scheduling next wallpaper change...')
        tab = crontab.CronTab(tabfile=cron_path)
        tab.remove_all()
        command = f'{script_path} set --next'
        cron_job = tab.new(command)
        if args['duration'] == 24:
            cron_job.every().dom()
        else:
            cron_job.every(args['duration']).hours()
        tab.write()
        logger.debug(f'cron_job = {tab.render()}')
        # FIXME: scheduling
        # user = getpass.getuser()
        # cron_path = f'/var/spool/cron/crontabs/{user}'
        # try:
        #     with open(cron_path) as cron_file:
        #         crontab = cron_file.readlines()
        # except FileNotFoundError:
        #     logger.error('No cron_file')
        #     crontab = []
        #
        # for line_number, line in enumerate(crontab):
        #     if 'booru-wallpaper' in line:
        #         break
        # else:
        #     line_number = len(crontab)
        #
        # if args['duration'] == 24:
        #     duration = '0 * * * *'
        # else:
        #     duration = "0 */{args['duration'] * * *"
        #
        # command = f'{script_path} set --next # booru-wallpaper'
        # crontab[line_number] = f'{duration} {command}\n'
        # logger.debug(f'crontab = {crontab}')
        # with open(cron_path, 'w') as cron_file:
        #     cron_file.writelines(crontab)


if __name__ == '__main__':
    main()
